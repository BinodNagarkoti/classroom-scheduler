{"version":3,"sources":["firestore.js","withLoader.jsx","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","WithLoader","props","toRender","isLoading","style","margin","Skeleton","isEmpty","children","useStyles","makeStyles","theme","createStyles","formRoot","width","spacing","root","maxWidth","media","height","App","dateTOAMORPM","date","hours","getHours","minutes","getMinutes","ampm","db","firestore","styles","useState","classes","setClasses","docid","setDocid","teachername","setTeachername","classname","setClassname","Date","fromDate","setFromDate","aheadTime","setHours","toDate","setToDate","error","setError","days","setDays","useEffect","a","collection","onSnapshot","snapshot","docs","map","doc","console","log","data","id","fetchData","className","noValidate","autoComplete","length","class","role","Typography","variant","color","component","FormControl","fullWidth","TextField","required","size","value","label","onChange","event","target","placeholder","Autocomplete","multiple","newValue","item","options","getOptionLabel","option","renderTags","tagValue","getTagProps","index","Chip","renderInput","params","utils","DateFnsUtils","KeyboardButtonProps","Button","onClick","set","from","toString","getTime","to","then","catch","message","undefined","Grid","container","direction","justify","md","Card","CardActionArea","CardContent","gutterBottom","Number","split","day","avatar","Avatar","CardActions","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54e1535e.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA-SezsO8Z9PApGfvcEynPtFZbuKXk0V3g\",\r\n    authDomain: \"classroom-scheduler-af703.firebaseapp.com\",\r\n    projectId: \"classroom-scheduler-af703\",\r\n    storageBucket: \"classroom-scheduler-af703.appspot.com\",\r\n    messagingSenderId: \"1047093565751\",\r\n    appId: \"1:1047093565751:web:c49f912b76223dcde222b2\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React from 'react';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nexport default function WithLoader(props) {\r\n        let toRender;\r\n        if (props.isLoading) {\r\n            toRender = <>\r\n                <div style={{margin: '0 auto'}}>\r\n                <Skeleton />\r\n                </div>\r\n                <br/>\r\n            </>;\r\n        } else if (props.isEmpty) {\r\n            toRender = <>\r\n                <div style={{margin: '0 auto'}}>\r\n                    No Data to Display\r\n                </div>\r\n                <br/>\r\n            </>;\r\n        } else {\r\n            toRender = props.children;\r\n        }\r\n\r\n        return <>\r\n            {toRender}\r\n        </>\r\n\r\n}","import { useEffect, useState } from 'react';\nimport firebase from './firestore';\nimport Chip from '@material-ui/core/Chip';\nimport 'date-fns';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { Card, Grid } from '@material-ui/core';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport DateFnsUtils from '@date-io/date-fns';\nimport WithLoader from './withLoader';\nimport FormControl from '@material-ui/core/FormControl';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n} from '@material-ui/pickers';\n\nimport './App.css'\nconst useStyles = makeStyles((theme) => createStyles({\n    formRoot: {\n        margin: '0 auto',\n        width: '50ch',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    root: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 140,\n    },\n}));\n\nfunction App() {\n    const dateTOAMORPM = (date) => {\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour '0' should be '12'\n        minutes = minutes < 10 ? '0' + minutes : minutes;\n        var strTime = hours + ':' + minutes + ' ' + ampm;\n        return strTime;\n    }\n    const db = firebase.firestore();\n    const styles = useStyles();\n    const [classes, setClasses] = useState([]);\n    const [docid, setDocid] = useState(null);\n\n    const [teachername, setTeachername] = useState(\"\");\n    const [classname, setClassname] = useState(\"\");\n\n    const [fromDate, setFromDate] = useState(new Date());\n    const aheadTime = new Date().setHours(fromDate.getHours() + 1)\n    const [toDate, setToDate] = useState(new Date(aheadTime));\n    const [error, setError] = useState(\"\");\n    const weekDays = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\n    const [days, setDays] = useState([]);\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n\n            db.collection('classes').onSnapshot(snapshot => {\n                setClasses(snapshot.docs.map(doc => {\n                    console.log(doc.data());\n                    return ({ id: doc.id, ...(doc.data()) })\n                })\n                );\n            });\n            console.log(classes);\n        }\n        fetchData();\n    }, [])\n\n    const clearAll = () => {\n        setTeachername(\"\");\n        setClassname(\"\");\n        setFromDate(new Date());\n        setToDate(new Date().setHours(fromDate.getHours() + 1));\n        setDocid(null);\n        setDays([]);\n        setError(\"\");\n    }\n\n    const validateValue = () => {\n        if (teachername.length === 0) {\n            setError('teacher name is required');\n            return false\n        }\n        if (classname.length === 0) {\n            setError('class name is required');\n            return false\n        }\n        if (days.length === 0) {\n            setError(\"select at least one day\");\n            return false\n        }\n        return true;\n    }\n    return (<>\n\n        {/* <!-- As a heading --> */}\n        <nav className=\"navbar navbar-light bg-light\">\n            <div className=\"container-fluid\">\n                <span className=\"navbar-brand mb-0 h1\">Class Schedule</span>\n            </div>\n        </nav>\n        <div className=\"container\">\n            <form className={styles.formRoot} noValidate autoComplete=\"off\">\n                {error.length > 0 && <div class=\"alert alert-danger\" role=\"alert\">\n                    {error}\n                </div>}\n                <Typography variant=\"body2\" className=\"card-subtitle mb-2 text-muted\" color=\"textSecondary\" component=\"p\">\n                    {docid !== null ? \"You can edit desired values and click update\" : ''}\n                </Typography>\n                <FormControl fullWidth className={classes.margin}>\n                    <TextField required size='small' id=\"outlined-basic-1\" value={classname} label=\"class name\" onChange={(event) => setClassname(event.target.value)} placeholder=\"class 1,class 2..\" variant=\"outlined\" />\n                </FormControl>\n                <FormControl fullWidth className={classes.margin}>\n                    <TextField required size='small' id=\"outlined-basic-2\" value={teachername} label=\"teacher name\" onChange={(event) => setTeachername(event.target.value)} placeholder=\"jhon, libiya..\" variant=\"outlined\" />\n                </FormControl>\n                <FormControl fullWidth className={classes.margin}>\n                    <Autocomplete\n                        required\n                        multiple\n                        id=\"fixed-tags-demo\"\n                        value={days}\n                        size='small'\n                        onChange={(event, newValue) => {\n                            setDays([\n                                ...newValue.map(item => item)\n                            ]);\n                        }}\n                        options={weekDays}\n                        getOptionLabel={(option) => option}\n                        renderTags={(tagValue, getTagProps) =>\n                            tagValue.map((option, index) => (\n                                <Chip key={index}\n                                    label={option}\n                                    {...getTagProps({ index })}\n                                />\n                            ))\n                        }\n                        renderInput={(params) => (\n                            <TextField {...params} label=\"Days\" variant=\"outlined\" placeholder=\"sunday, monday...\" />\n                        )}\n                    />\n                </FormControl>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardTimePicker\n                        required\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        size='small'\n                        fullWidth\n                        label=\"From\"\n                        variant=\"outlined\"\n                        value={fromDate}\n                        onChange={(date) => setFromDate(date)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}\n                    />\n                    {/* {fromDate} */}\n                    {/* {toDate} */}\n                    <KeyboardTimePicker\n                        required\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        variant=\"outlined\"\n                        size='small'\n                        label=\"To\" fullWidth\n                        value={toDate}\n                        onChange={(date) => setToDate(date)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <FormControl fullWidth className={classes.margin}>\n                    <Button size='small' variant='outlined' label='Add' color='primary' onClick={() => {\n                        if (validateValue()) {\n                            if (docid) {\n                                db.collection('classes').doc(docid).set({\n                                    from: new Date(fromDate.toString()).getTime(),\n                                    to: new Date(toDate.toString()).getTime(),\n                                    teachername,\n                                    classname,\n                                    days: days.toString(),\n                                })\n                                    .then(() => console.log('Successfully updated'))\n                                    .catch(error => console.log(error.message));\n                            } else {\n                                db.collection('classes').doc().set({\n                                    from: new Date(fromDate.toString()).getTime(),\n                                    to: new Date(toDate.toString()).getTime(),\n                                    teachername,\n                                    classname,\n                                    days: days.toString(),\n                                })\n                                    .then(() => console.log('Successfully added'))\n                                    .catch(error => console.log(error.message));\n                            }\n                            clearAll();\n                        }\n                    }} >{docid !== null ? \"Update\" : \"Add\"}</Button>\n                </FormControl>\n\n            </form>\n\n            <WithLoader isLoading={classes === undefined} isEmpty={classes !== undefined && classes.length === 0}>\n                <Grid container direction=\"row\" spacing={1} justify=\"flex-start\" >\n                    {classes.map((item, index) =>\n                        <Grid item md={3} key={\"card_\" + index}>\n                            <Card className={styles.root}>\n                                <CardActionArea>\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                            {item.classname}\n                                        </Typography>\n                                        <Typography variant=\"body2\" className=\"card-subtitle mb-2 text-muted\" color=\"textSecondary\" component=\"h6\">\n                                            {dateTOAMORPM(new Date(Number(item.from)))} to {dateTOAMORPM(new Date(Number(item.to)))}\n                                        </Typography>\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\n                                            {item.days.split(',').map(day => <Chip label={day} style={{ margin: \"2px\" }} color=\"primary\" variant=\"outlined\" />)}\n                                        </Typography>\n                                        <br />\n                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                            <Chip\n                                                avatar={<Avatar>{item.teachername[0]}</Avatar>}\n                                                label={item.teachername}\n                                                color=\"primary\"\n                                            />\n                                        </Typography>\n                                    </CardContent>\n                                </CardActionArea>\n                                <CardActions>\n                                    <Button size=\"small\" color=\"primary\" onClick={() => {\n                                        setTeachername(item.teachername);\n                                        setClassname(item.classname);\n                                        setDays(item.days.split(','));\n                                        setFromDate(new Date(item.from));\n                                        setToDate(new Date(item.to));\n                                        setDocid(item.id);\n                                    }}>\n                                        Edit\n                            </Button>\n                                    <Button size=\"small\" color=\"primary\" onClick={() => {\n                                        db.collection(\"classes\").doc(item.id).delete().then(() => console.log(\"Deleted\"))\n                                    }}>\n                                        Delete\n                            </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>)}\n                </Grid >\n            </WithLoader>\n        </div>\n    </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}