{"version":3,"sources":["firestore.js","withLoader.jsx","Navbar/navbar.jsx","redux/classes.js","Modal/bootstrapModal.jsx","utils/commonUtils.js","Card/classcard.jsx","form/newClass.jsx","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","WithLoader","props","toRender","isLoading","style","margin","Skeleton","variant","width","height","isEmpty","children","Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","today","Date","oneHourAhead","setHours","getHours","classesSlice","createSlice","name","initialState","formData","docid","teachername","classname","days","fromDate","getTime","toDate","subjectname","roomno","data","undefined","error","reducers","setError","state","action","payload","setFormData","clearFormData","setDocid","setRoomno","setTeacherName","setSubjectName","setClassName","setDays","setFromDate","setToDate","update","setData","serializedata","map","from","to","Number","getData","actions","BootstrapModal","title","dispatch","useDispatch","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","onClick","dateTOAMORPM","date","hours","minutes","getMinutes","ampm","ClassCard","index","onEditClick","root","db","firestore","Card","CardActionArea","CardContent","Typography","gutterBottom","component","color","split","day","Chip","label","getMilliseconds","avatar","Avatar","CardActions","Button","size","collection","doc","delete","then","console","log","useStyles","makeStyles","theme","createStyles","formRoot","padding","spacing","maxWidth","media","NewClass","styles","useSelector","classes","Grid","container","justify","item","md","FormControl","fullWidth","TextField","required","value","onChange","event","target","placeholder","Autocomplete","multiple","newValue","options","getOptionLabel","option","renderTags","tagValue","getTagProps","renderInput","params","utils","DateFnsUtils","KeyboardButtonProps","length","set","toString","catch","message","App","useEffect","a","onSnapshot","snapshot","docs","fetchData","useState","classModelTitle","setClassModelTitle","direction","reducer","classesReducer","store","configureStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a8cad8a.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA-SezsO8Z9PApGfvcEynPtFZbuKXk0V3g\",\r\n    authDomain: \"classroom-scheduler-af703.firebaseapp.com\",\r\n    projectId: \"classroom-scheduler-af703\",\r\n    storageBucket: \"classroom-scheduler-af703.appspot.com\",\r\n    messagingSenderId: \"1047093565751\",\r\n    appId: \"1:1047093565751:web:c49f912b76223dcde222b2\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React from 'react';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nexport default function WithLoader(props) {\r\n        let toRender;\r\n        if (props.isLoading) {\r\n            toRender = <>\r\n                <div style={{margin: '0 auto'}}>\r\n                <Skeleton variant=\"rect\" width={210} height={118} />\r\n                <Skeleton width={150}  />\r\n                <Skeleton width={100} />\r\n\r\n                </div>\r\n                <br/>\r\n            </>;\r\n        } else if (props.isEmpty) {\r\n            toRender = <>\r\n                <div style={{margin: '0 auto'}}>\r\n                    No Data to Display\r\n                </div>\r\n                <br/>\r\n            </>;\r\n        } else {\r\n            toRender = props.children;\r\n        }\r\n\r\n        return <>\r\n            {toRender}\r\n        </>\r\n\r\n}","export const Navbar = () => (\r\n<>\r\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\".#\">\r\n          Navbar\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link btn\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\r\n                New class\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>        \r\n</>\r\n    )","import { createSlice } from '@reduxjs/toolkit';\r\nconst today = new Date();\r\nconst oneHourAhead = new Date().setHours(today.getHours() + 1);\r\nconst classesSlice = createSlice({\r\n    name: 'classes',\r\n    initialState: {\r\n        formData: {\r\n            docid: null,\r\n            teachername: '',\r\n            classname: '',\r\n            days: [],\r\n            fromDate: today.getTime(),\r\n            toDate: oneHourAhead,\r\n            subjectname: '',\r\n            roomno: '',\r\n        },\r\n        data: undefined,\r\n        error: undefined,\r\n    },\r\n    reducers: {\r\n        setError: (state, action) => {\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            };\r\n        },\r\n        setFormData(state, action) {\r\n            state.formData = {\r\n                docid: action.payload.docid,\r\n                teachername: action.payload.teachername,\r\n                classname: action.payload.classname,\r\n                days: action.payload.days,\r\n                fromDate: action.payload.fromDate,\r\n                toDate: action.payload.toDate,\r\n                subjectname: action.payload.subjectname,\r\n                roomno: action.payload.roomno,\r\n            };\r\n        },\r\n        clearFormData(state) {\r\n            return {\r\n                ...state,\r\n                formData: {\r\n                    docid: null,\r\n                    teachername: '',\r\n                    classname: '',\r\n                    days: [],\r\n                    fromDate: today.getTime(),\r\n                    toDate: oneHourAhead,\r\n                    subjectname: '',\r\n                    roomno: '',\r\n                },\r\n            };\r\n        },\r\n        setDocid: (state, action) => {\r\n            state.formData.docid = action.payload;\r\n        },\r\n        setRoomno: (state, action) => {\r\n            state.formData.roomno = action.payload;\r\n        },\r\n        setTeacherName: (state, action) => {\r\n            state.formData.teachername = action.payload;\r\n        },\r\n\r\n        setSubjectName: (state, action) => {\r\n            state.formData.subjectname = action.payload;\r\n        },\r\n\r\n        setClassName: (state, action) => {\r\n            state.formData.classname = action.payload;\r\n        },\r\n\r\n        setDays: (state, action) => {\r\n            state.formData.days = action.payload;\r\n        },\r\n\r\n        setFromDate: (state, action) => {\r\n            state.formData.fromDate = action.payload;\r\n        },\r\n\r\n        setToDate: (state, action) => {\r\n            state.formData.toDate = action.payload;\r\n        },\r\n\r\n        update: (state, action) => {\r\n            state.formData = action.payload;\r\n        },\r\n\r\n        setData: (state, action) => {\r\n            const serializedata = action.payload.map(\r\n                ({ subjectname, roomno, teachername, id, classname, days, from, to }) => {\r\n                    return {\r\n                        docid: id,\r\n                        subjectname,\r\n                        roomno,\r\n                        teachername,\r\n                        classname,\r\n                        fromDate: Number(from),\r\n                        toDate: Number(to),\r\n                        days,\r\n                    };\r\n                }\r\n            );\r\n\r\n            return {\r\n                formData: { ...state.formData },\r\n                data: [...serializedata],\r\n            };\r\n        },\r\n        getData() {},\r\n    },\r\n});\r\nexport const {\r\n    setTeacherName,\r\n    setSubjectName,\r\n    setRoomno,\r\n    setClassName,\r\n    setDocid,\r\n    setDays,\r\n    clearFormData,\r\n    setError,\r\n    setFromDate,\r\n    getData,\r\n    setToDate,\r\n    update,\r\n    setFormData,\r\n    setData,\r\n} = classesSlice.actions;\r\nexport default classesSlice.reducer;\r\n","\r\nimport {\r\n  clearFormData,\r\n} from '../redux/classes';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\nexport const BootstrapModal = ({ children, title, }) => {\r\n  const dispatch = useDispatch();\r\n    return (<>\r\n          <div\r\n        className=\"modal fade\"\r\n        id=\"exampleModalCenter\"\r\n        tabIndex=\"-1\"\r\n        role=\"dialog\"\r\n        aria-labelledby=\"exampleModalCenterTitle\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">\r\n                {title}\r\n              </h5>\r\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={() => dispatch(clearFormData())} aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                        <div className=\"container\">\r\n                            {children}\r\n                        </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        </>)\r\n}","export const dateTOAMORPM = (date) => {\r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n    CardContent,\r\n    Chip,\r\n    Avatar,\r\n    Typography,\r\n    Button,\r\n    CardActions,\r\n    Card,\r\n    CardActionArea,\r\n} from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport firebase from '../firestore';\r\nimport { setFormData, clearFormData } from '../redux/classes';\r\nimport { dateTOAMORPM } from '../utils/commonUtils';\r\nconst today = new Date();\r\nexport const ClassCard = ({\r\n    docid,\r\n    fromDate,\r\n    toDate,\r\n    days,\r\n    index,\r\n    roomno,\r\n    teachername,\r\n    classname,\r\n    subjectname,\r\n    onEditClick,\r\n    root,\r\n}) => {\r\n    const db = firebase.firestore();\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            <Card className={root}>\r\n                <CardActionArea>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {classname}\r\n                        </Typography>\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            className=\"card-subtitle mb-2 text-muted\"\r\n                            color=\"textSecondary\"\r\n                            component=\"h6\">\r\n                            {dateTOAMORPM(new Date(Number(fromDate)))} to{' '}\r\n                            {dateTOAMORPM(new Date(Number(toDate)))}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\r\n                            {days.split(',').map((day, index) => (\r\n                                <Chip\r\n                                    label={day}\r\n                                    key={'_day_chip_' + index + 1 * today.getMilliseconds()}\r\n                                    style={{ margin: '2px' }}\r\n                                    color=\"primary\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            ))}\r\n                        </Typography>\r\n                        <br />\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\r\n                            <Chip\r\n                                avatar={<Avatar>{teachername[0]}</Avatar>}\r\n                                label={teachername}\r\n                                color=\"primary\"\r\n                            />\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Button\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        data-toggle=\"modal\"\r\n                        data-target=\"#exampleModalCenter\"\r\n                        onClick={() => {\r\n                            onEditClick();\r\n                            dispatch(\r\n                                setFormData({\r\n                                    teachername,\r\n                                    classname,\r\n                                    days: days.split(','),\r\n                                    fromDate,\r\n                                    toDate,\r\n                                    docid,\r\n                                    subjectname,\r\n                                    roomno,\r\n                                })\r\n                            );\r\n                        }}>\r\n                        Edit\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            db.collection('classes')\r\n                                .doc(docid)\r\n                                .delete()\r\n                                .then(() => {\r\n                                    dispatch(clearFormData);\r\n                                    console.log('Deleted');\r\n                                });\r\n                        }}>\r\n                        Delete\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport 'date-fns';\r\nimport {\r\n    Chip,\r\n    TextField,\r\n    makeStyles,\r\n    createStyles,\r\n    FormControl,\r\n    Typography,\r\n    Button,\r\n    Grid,\r\n} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardTimePicker } from '@material-ui/pickers';\r\nimport {\r\n    setTeacherName,\r\n    setSubjectName,\r\n    setRoomno,\r\n    setClassName,\r\n    // setDocid,\r\n    setDays,\r\n    setError,\r\n    clearFormData,\r\n    setFromDate,\r\n    // getData,\r\n    setToDate,\r\n    // update,\r\n    // setData,\r\n} from '../redux/classes';\r\n\r\nimport firebase from '../firestore';\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        formRoot: {\r\n            margin: '0 auto',\r\n            width: '50ch',\r\n            '& > *': {\r\n                padding: theme.spacing(1),\r\n            },\r\n        },\r\n        root: {\r\n            maxWidth: 345,\r\n        },\r\n        media: {\r\n            height: 140,\r\n        },\r\n    })\r\n);\r\n\r\nexport const NewClass = (props) => {\r\n    const styles = useStyles();\r\n    const dispatch = useDispatch();\r\n    let {\r\n        error,\r\n        data,\r\n        formData: { classname, teachername, fromDate, toDate, docid, subjectname, roomno, days },\r\n    } = useSelector((state) => state.classes);\r\n    const db = firebase.firestore();\r\n\r\n    const weekDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\r\n\r\n    const today = new Date();\r\n\r\n    const validateValue = () => {\r\n        if (teachername.length === 0) {\r\n            dispatch(setError('teacher name is required'));\r\n            return false;\r\n        }\r\n        if (classname.length === 0) {\r\n            dispatch(setError('class name is required'));\r\n            return false;\r\n        }\r\n        if (days.length === 0) {\r\n            dispatch(setError('select at least one day'));\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container className={styles.formRoot} id=\"newClass\" justify=\"flex-start\">\r\n                {error && (\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        {error}\r\n                    </div>\r\n                )}\r\n                <Grid item md={6}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            required\r\n                            size=\"small\"\r\n                            id=\"outlined-basic-1\"\r\n                            value={classname}\r\n                            label=\"class name\"\r\n                            onChange={(event) => dispatch(setClassName(event.target.value))}\r\n                            placeholder=\"class 1,class 2..\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item md={6}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            required\r\n                            size=\"small\"\r\n                            id=\"outlined-basic-2\"\r\n                            value={teachername}\r\n                            label=\"teacher name\"\r\n                            onChange={(event) => dispatch(setTeacherName(event.target.value))}\r\n                            placeholder=\"jhon, libiya..\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item md={6}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            required\r\n                            size=\"small\"\r\n                            id=\"outlined-basic-2\"\r\n                            value={subjectname}\r\n                            label=\"Subject name\"\r\n                            onChange={(event) => dispatch(setSubjectName(event.target.value))}\r\n                            placeholder=\"Math, Science, break...\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item md={6}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            required\r\n                            size=\"small\"\r\n                            id=\"outlined-basic-2\"\r\n                            value={roomno}\r\n                            label=\"Room no\"\r\n                            onChange={(event) => dispatch(setRoomno(event.target.value))}\r\n                            placeholder=\"107, 108, 109...\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item md={12}>\r\n                    <FormControl fullWidth>\r\n                        <Autocomplete\r\n                            required\r\n                            multiple\r\n                            id=\"fixed-tags-demo\"\r\n                            value={days ?? []}\r\n                            size=\"small\"\r\n                            onChange={(event, newValue) => {\r\n                                dispatch(setDays(newValue));\r\n                            }}\r\n                            options={weekDays}\r\n                            getOptionLabel={(option) => option}\r\n                            renderTags={(tagValue, getTagProps) =>\r\n                                tagValue.map((option, index) => (\r\n                                    <Chip\r\n                                        key={index + 1 * today.getMilliseconds() + '_chip'}\r\n                                        label={option}\r\n                                        {...getTagProps({ index })}\r\n                                    />\r\n                                ))\r\n                            }\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    label=\"Days\"\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"sunday, monday...\"\r\n                                />\r\n                            )}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item md={6}>\r\n                    <MuiPickersUtilsProvider fullWidth utils={DateFnsUtils}>\r\n                        <KeyboardTimePicker\r\n                            required\r\n                            margin=\"normal\"\r\n                            id=\"time-picker\"\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            label=\"From\"\r\n                            variant=\"outlined\"\r\n                            value={new Date(fromDate)}\r\n                            onChange={(date) => dispatch(setFromDate(date.getTime()))}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change time',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </Grid>\r\n                <Grid item md={6}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardTimePicker\r\n                            fullWidth\r\n                            required\r\n                            margin=\"normal\"\r\n                            id=\"time-picker\"\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            label=\"To\"\r\n                            value={new Date(toDate)}\r\n                            onChange={(date) => dispatch(setToDate(date.getTime()))}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change time',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </Grid>\r\n\r\n                <FormControl fullWidth>\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        label=\"Add\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n                            if (validateValue()) {\r\n                                if (docid) {\r\n                                    db.collection('classes')\r\n                                        .doc(docid)\r\n                                        .set({\r\n                                            from: fromDate,\r\n                                            to: toDate,\r\n                                            teachername,\r\n                                            classname,\r\n                                            days: days.toString(),\r\n                                            subjectname,\r\n                                            roomno,\r\n                                        })\r\n                                        .then(() => {\r\n                                            dispatch(clearFormData());\r\n                                            console.log('Successfully Updated');\r\n                                        })\r\n                                        .catch((error) => console.log(error.message));\r\n                                } else {\r\n                                    db.collection('classes')\r\n                                        .doc()\r\n                                        .set({\r\n                                            from: fromDate,\r\n                                            to: toDate,\r\n                                            teachername,\r\n                                            classname,\r\n                                            days: days.toString(),\r\n                                            subjectname,\r\n                                            roomno,\r\n                                        })\r\n                                        .then(() => {\r\n                                            dispatch(clearFormData());\r\n                                            console.log('Successfully added');\r\n                                        })\r\n                                        .catch((error) => console.log(error.message));\r\n                                }\r\n                            }\r\n                        }}>\r\n                        {docid !== null ? 'Update' : 'Add'}\r\n                    </Button>\r\n                </FormControl>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\nimport firebase from './firestore';\nimport 'date-fns';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport WithLoader from './withLoader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navbar } from './Navbar/navbar';\nimport { setData } from './redux/classes';\nimport { BootstrapModal } from './Modal/bootstrapModal';\nimport './App.css';\nimport { ClassCard } from './Card/classcard';\nimport { NewClass } from './form/newClass';\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        formRoot: {\n            margin: '0 auto',\n            width: '50ch',\n            '& > *': {\n                padding: theme.spacing(1),\n            },\n        },\n        root: {\n            maxWidth: 345,\n        },\n        media: {\n            height: 140,\n        },\n    })\n);\n\nfunction App() {\n    const dispatch = useDispatch();\n    const db = firebase.firestore();\n    const styles = useStyles();\n    const today = new Date();\n    useEffect(() => {\n        const fetchData = async () => {\n            db.collection('classes').onSnapshot((snapshot) => {\n                const data = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n                dispatch(setData(data));\n            });\n        };\n        fetchData();\n    }, []);\n    let {\n        error,\n        data,\n        formData: { docid },\n    } = useSelector((state) => state.classes);\n\n    const [classModelTitle, setClassModelTitle] = useState('Create New Class Schedule');\n    // if (docid) {\n    //     setClassModelTitle('Update Class Schedule');\n    // }\n    return (\n        <>\n            {/* <!-- As a heading --> */}\n            <Navbar />\n            {/* <!-- Modal --> */}\n            <BootstrapModal title={classModelTitle}>\n                <NewClass />\n            </BootstrapModal>\n\n            <div className=\"container\">\n                <WithLoader\n                    isLoading={data === undefined}\n                    isEmpty={data !== undefined && data.length === 0}>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        id=\"AllClasses\"\n                        spacing={1}\n                        justify=\"flex-start\">\n                        {data &&\n                            data.map((item, index) => (\n                                <Grid item md={3} key={(index + 1) * today.getMilliseconds()}>\n                                    <ClassCard\n                                        root={styles.root}\n                                        classname={item.classname}\n                                        index={index}\n                                        teachername={item.teachername}\n                                        fromDate={item.fromDate}\n                                        toDate={item.toDate}\n                                        docid={item.docid}\n                                        roomno={item.roomno}\n                                        subjectname={item.subjectname}\n                                        days={item.days}\n                                        onEditClick={() =>\n                                            setClassModelTitle('Edit Class Schedule')\n                                        }\n                                    />\n                                </Grid>\n                            ))}\n                    </Grid>\n                </WithLoader>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport classesReducer from './classes';\r\n\r\n\r\nconst reducer = {\r\n    classes: classesReducer\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer\r\n})\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}